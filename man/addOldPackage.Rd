% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{methods}
\name{addOldPackage}
\alias{addOldPackage}
\title{Add old package versions to a miniCRAN repository.}
\usage{
addOldPackage(pkgs = NULL, path = NULL, vers = NULL,
  repos = getOption("repos"), type = "source", Rversion = R.version,
  writePACKAGES = TRUE, deps = FALSE)
}
\arguments{
\item{vers}{The package version to install.}

\item{pkgs}{Character vector of packages to be installed.}

\item{path}{The local path to the directory where the miniCRAN repo resides.}

\item{repos}{character vector, the base URL(s) of the repositories to use,
e.g., the URL of a CRAN mirror such as "\code{http://cran.us.r-project.org}".}

\item{type}{character, indicating the type of package to download and
 install. See \code{\link{install.packages}}.}

\item{Rversion}{numeric version of the R system for which to fetch packages.
See \code{\link{R_system_version}}.}

\item{writePACKAGES}{If TRUE, calls \code{\link[tools]{write_PACKAGES}} to
update the repository PACKAGES file.}

\item{deps}{logical indicating whether the package dependencies should be
added (default \code{TRUE}).}
}
\value{
Installs the packages, rebuilds the package index invisibly returns
the number of packages writen to the index files.
}
\description{
Will download and add older source package versions. Older binary versions
are not normally available on CRAN and should be build from source on the
platform for which they are required. As such, specifying \code{type!="source"}
will likely fail as the download will not be successful.
}
\note{
Dependencies for old package versions cannot be determined automatically
and must be specified by the user in `pkgs` and `vers`. Thus, \code{deps=FALSE}
is the default for this function.
}
\examples{
### `checkVersions` and `add.packages.miniCRAN` require an existing miniCRAN repo

# Specify list of packages to download
revolution <- c(CRAN="http://cran.revolutionanalytics.com")
pkgs <- c("foreach")

pdb <- cranJuly2014

\dontrun{
  pdb <- pkgAvail(repos=revolution, type="source")
}

pkgList <- pkgDep(pkgs, availPkgs=pdb, repos=revolution, type="source", suggests=FALSE)
pkgList

\dontrun{
  # Create temporary folder for miniCRAN
  dir.create(pth <- file.path(tempdir(), "miniCRAN"))

  # Make repo for source and win.binary
  makeRepo(pkgList, path=pth, repos=revolution, type="source")
  makeRepo(pkgList, path=pth, repos=revolution, type="win.binary")

  # Add other versions of a package (and assume these were added previously)
  addOldPackage(pkgs, path=pth, vers="1.4.0", type="source")
  # NOTE: older binary versions would need to be build from source

  # List package versions in the miniCRAN repo (produces warning about duplicates)
  pkgVersionsSrc <- checkVersions(pkgs, path=pth, type="source")
  pkgVersionsBin <- checkVersions(pkgs, path=pth, type="win.binary")

  # After inspecting package versions, remove old versions
  basename(pkgVersionsSrc) # "foreach_1.4.0.tar.gz"  "foreach_1.4.2.tar.gz"
  basename(pkgVersionsBin) # "foreach_1.4.0.zip"     "foreach_1.4.2.zip"
  file.remove(c(pkgVersionsSrc[1], pkgVersionsBin[1]))

  # Rebuild package index after adding/removing files
  tools::write_PACKAGES(pkgPathSrc, type="source")
  tools::write_PACKAGES(pkgPathBin, type="win.binary")

  # Add new packages (from CRAN) to the miniCRAN repo
  add.packages.miniCRAN("raster", path=pth, repos=revolution, type="source")
  add.packages.miniCRAN("raster", path=pth, repos=revolution, type="win.binary")

  # Delete temporary folder
  unlink(pth, recursive=TRUE)
}
}

